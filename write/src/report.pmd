```python, import_data, echo=False
#
# Title: ICE Air
# Author: University of Washington Center for Human Rights
# Date: 2019-03-18
#

import pandas as pd
import numpy as np
import yaml
import matplotlib.pyplot as plt
from tabulate import tabulate

plt.style.use('ggplot')

with open('input/dtypes.yaml', 'r') as yamlfile:
    column_types = yaml.load(yamlfile)

read_csv_opts = {'sep': '|',
                 'quotechar': '"',
                 'compression': 'gzip',
                 'encoding': 'utf-8',
                 'dtype': column_types,
                 'parse_dates': ['MissionDate'],
                 'infer_datetime_format': True}

df = pd.read_csv('input/ice-air.csv.gz', **read_csv_opts)
data_dict = pd.read_csv('input/ARTS_Data_Dictionary.csv.gz', sep='|', header=1)

with open('hand/data.yaml', 'r') as yamlfile:
    data = yaml.load(yamlfile)

fn_count = 1
fn_buffer = []

def fn(ref_text=str):
    global fn_count, fn_buffer
    ftn_sup = f'<a href="#_ftn{fn_count}" name="_ftnref{fn_count}"><sup>[{fn_count}]</sup></a>'
    ftn_ref = f'<a href="#_ftnref{fn_count}" name="_ftn{fn_count}"><sup>[{fn_count}]</sup></a> {ref_text}'
    fn_buffer.append(ftn_ref)
    fn_count = fn_count + 1
    print(ftn_sup)

def print_fn_refs():
    global fn_buffer
    for fn in fn_buffer:
        print(fn)
        print()

```
# ICE Air: Data Appendix

## The ARTS dataset

```python, global_vars, echo=False

earliest_record = df['MissionDate'].min()
latest_record = df['MissionDate'].max()
number_of_pickup_airports = len(set(df['PULOC'].dropna()))
number_of_dropoff_airports = len(set(df['DropLoc'].dropna()))

unique_AlienMasterID = len(set(df['AlienMasterID']))
assert sum(df['AlienMasterID'].isnull()) == 0
AlienMasterID_count = df.groupby(['AlienMasterID']).size()

unique_MissionIDs = len(set(df['MissionID']))
assert sum(df['MissionID'].isnull()) == 0

unique_MissionNumbers = len(set(df['MissionNumber']))
assert sum(df['MissionNumber'].isnull()) == 0

assert unique_MissionIDs == unique_MissionNumbers

```

This report uses data from ICE's Alien Repatriation Tracking System (ARTS) released by ICE Enforcement and Removal Operations pursuant to a Freedom of Information Act (FOIA) request by the University of Washington Center for Human Rights. The ARTS dataset contains <%= len(df) %> records relating to ICE Air Operations charter flights during the period from <%= print(earliest_record.strftime('%B %-d, %Y')) %> to <%= print(latest_record.strftime('%B %-d, %Y')) %>, including full data for U.S. Federal Government Fiscal Years 2011 through 2018. Each record in the dataset relates to a single passenger on a single ICE Air mission.

The ARTS dataset is made up of <%= len(data['passenger_cols']) + len(data['airport_cols']) %> fields, defined in a data dictionary provided by ICE (see project [README](https://github.com/UWCHR/ice-air/blob/master/README.md)); however, as described below, the content of these fields does not always conform to the definitions provided. The first <%= len(data['passenger_cols'])%> fields relate to passenger and mission characteristics; the latter <%= len(data['airport_cols']) %> fields, marked by various prefixes, relate to characteristics of the airports and locations associated with each record. (Additional fields generated by UWCHR in the process of analysis of the dataset are not enumerated here.) There is no indication that the content of any of these fields was withheld or redacted by ICE upon release of the dataset. However, according to a [2015 audit of ICE Air by the Department of Homeland Security Office of Inspector General (OIG)](https://www.oig.dhs.gov/sites/default/files/assets/Mgmt/2015/OIG_15-57_Apr15.pdf), the ARTS database does include additional fields which were not released to UWCHR, including passenger A-Numbers and Fingerprint IDs; and details on the cost of individual flights.

## Dataset structure

The ARTS dataset uses three key fields to identify passengers (`AlienMasterID`) and missions (`MissionID` and `MissionNumber`). The `AlienMasterID` field is made up of <%= unique_AlienMasterID %> unique values. `AlienMasterID` values are numeric strings starting at <%= df['AlienMasterID'].min() %> and incrementing to <%= df['AlienMasterID'].max() %>, with some values skipped. Each `AlienMasterID` value is used only once; repeat passengers on multiple flights cannot be identified based solely on this field.

According to the 2015 DHS OIG audit, the ARTS database includes fields for passenger A-Numbers and Fingerprint IDs, which would permit tracking of repeat passengers; though the OIG also notes inconsistencies in the usage of these identifiers. The OIG report confirms that some passengers are subjected to repeated transfers, noting several cases of apparently redundant transfers. There is no inherent way to track repeat passengers on multiple flights in the ARTS dataset as released to the UWCHR by ICE; close analysis of specific combinations of passenger characteristics (i.e. age, nationality, criminal conviction status) does suggest that passengers are represented multiple times in the dataset, but systematically isolating repeat passengers without access to additional unique ID fields would be prohibitively difficult.

The `MissionID` and `MissionNumber` also present limitations for detailed analysis. The dataset contains <%= unique_MissionIDs %> `MissionID` and <%= unique_MissionNumbers %> `MissionNumber` values, which appear to be completely equivalent: combinations of these values are strictly one-to-one, and they are not hierarchical (see code snippet below). Both values consist of consecutive numbers, which suggests that contrary to the ARTS data dictionary, the `MissionNumber` field bears no relation to actual flight numbers.

```python, MissionID_versus_MissionNumber, echo=True

assert sum(df.groupby(['MissionID'])['MissionNumber'].nunique() > 1) == 0
assert sum(df.groupby(['MissionNumber'])['MissionID'].nunique() > 1) == 0
assert sum(df.groupby(['MissionNumber', 'MissionID'])['MissionDate'].nunique() > 1) == 0
assert sum(df.groupby(['MissionID', 'MissionNumber'])['MissionDate'].nunique() > 1) == 0

```

ICE Air missions as represented by the `MissionID` and `MissionNumber` fields never span more than one day, though multiple missions may occur on a given date. The `MissionDate` field only records the day of the mission; the dataset does not include any other time data, such as takeoff or landing timestamps. Each mission can include multiple combinations of pickup and drop-off locations, represented by the `PULOC` and `DropLoc` fields. These values encode the pickup and drop-off location for each passenger on the mission, not the flight itinerary of the mission. Therefore, while each mission may include multiple flight legs, it is not possible to use this version of the ARTS database to conclusively reconstruct itineraries or calculate the total number of legs on flights operated by ICE Air.

Remaining fields in the dataset represent passenger characteristics and metadata for pickup and dropoff airports associated with each airport. Many of the fields are unstandardized and present significant challenges for cleaning and analysis, especially the `Status`, `GangMember`, and `Convictions` fields, which include many unique and often irrelevant values. (This concern was also noted by the DHS OIG in its 2015 audit; in several cases, data entry processes seem to have become more standardized over time, which may obscure real trends in the data.) Several of these fields are worth explaining here:

* The `Status` field, despite being defined in the ARTS Data Dictionary as relating to "Criminal Status", appears to relate to the passenger's grounds for deportability or the status of their deportation proceedings. Some values in this field conform to a set of 29 alphanumeric codes used by ICE categorize the status of removal processes (see Kerwin et al., 2015, for a description of each of these codes *include table in report*), others consist of unstandardized text descriptions, including unrelated or irrelevant values. Analysis of the distribution of `Status` values prior to data cleaning shows that the 29 standardized codes were used very rarely prior to FY 2013; after FY 2013 the standardized values are more frequent. We have translated unstandardized values with more than 100 ocurrences into their standardized equivalents, where possible; see cleaning description below. In total this field contains more than <%= df['Status'].nunique() %> unique values, after cleaning.
* The `Convictions`, `Criminality` and `Code` fields all represent different ways of coding a passenger's criminal status. `Convictions` is an unstructured field with <%= df['Convictions'].nunique() %> unique values, presumably representing each passenger's most serious criminal conviction. The `Criminality` field is more structured and was easily cleaned into a binary category where "NC" represents passengers without a criminal conviction and "C" represents passengers with a criminal conviction. However, it is important to note that this field is not always consistent with the `Convictions` field, and it contains <%= sum(df['Criminality'].isnull()) %> missing values, especially in the earlier period of the dataset. The `Code` field consists of a relatively structured set of alphabetic codes which also appear to relate to criminal status, but their meaning is unclear.
* The `Age` and `Juvenile` fields are relatively self-explanatory. `Juvenile` is a binary field where all passengers aged 17 or younger are marked True; the values in this field are consistent with the numeric values in `Age`. Values below 0 or above 99 in `Age` were set as null values in the cleaning process.
* Notably, two ARTS fields that would likely be of great interest to researchers and advocates, `FamilyUnitFlag` and `UnaccompaniedFlag` (presumably relating to unaccompanied minors), are entirely unused in this dataset: not a single record is flagged with either of these values. As noted above, there is no indication that these values have been redacted or withheld by ICE, suggesting that they are simply not used.

## Cleaning

```python, clean, echo=False

with open('input/clean_stats.yaml', 'r') as yamlfile:
    clean_stats = yaml.load(yamlfile)

```

The raw ARTS dataset was released by ICE as <%= clean_stats['number_of_input_files'] %> XLSX format files, these were combined into a single dataset containing <%= clean_stats['input_records'] %> records. These files are available via [UWCHR's Google Drive](https://drive.google.com/drive/folders/1DFhlKSI1u9yrPqPmLKW0o2IKUsUhSEIl?usp=sharing). Prior to analysis, the ARTS dataset was converted from XLSX to CSV format and cleaned to standardize fields and remove some records with missing data. 

The cleaning process is fully documented in code; see the [`clean/`](https://github.com/UWCHR/ice-air/tree/master/clean) directory in the [project repository](https://github.com/UWCHR/ice-air). Data cleaning steps are described below:

* **Duplicate `AlienMasterID` values and airport metadata:** In the raw ARTS dataset, <%= clean_stats['duplicate_AlienMasterID'] %> `AlienMasterID` values are repeated up to 2 times. Upon close inspection, it becomes apparent that these records are repeated because of inconsistencies in certain airport metadata values (fields starting with the prefixes `air_` or `air2_`), resulting in the duplication of some passenger records, probably due to a database merge by ICE prior to release. (For example, all records for Yuma International Airport in Yuma, AZ are duplicated, with one version of the records incorrectly listing "AR" as the state associated with the airport.) <%= clean_stats['dropped_duplicate_AlienMasterID'] %> duplicate `AlienMasterID` values were dropped and erroneous or missing airport metadata was corrected; see `ice-air/clean/hand/bad_airports.csv` for values that were substituted. Airport metadata fields not used in the present analysis, such as numeric codes for US states, were not cleaned.
* **Passenger characteristics:** The ARTS dataset includes several fields with unstandardized values. UWCHR has cleaned or partially cleaned several of these fields for analysis; original values to be cleaned and their subsitutions are documented in the file `ice-air/clean/hand/clean.yaml`. Fields not used in the present analysis were not cleaned.
* **Missing data:** <%= clean_stats['null_puloc'] %> passenger records with missing pickup locations and <%= clean_stats['null_droploc'] %> records with missing dropoff airports were dropped from the dataset. Records with missing data in other fields were not dropped.

## Analysis

```python, ice_air_scope, echo=False

assert sum(df['DropLoc'].isnull()) == 0
assert sum(df['PULOC'].isnull()) == 0
number_of_pickup_airports = len(set(df['PULOC'].dropna()))
number_of_dropoff_airports = len(set(df['DropLoc'].dropna()))
total_airports = len(set(df['PULOC'].dropna()).union(set(df['DropLoc'].dropna())))

number_of_pickup_countries = len(set(df['air_Country'].dropna()))
number_of_dropoff_countries = len(set(df['air2_Country'].dropna()))
total_countries = len(set(df['air_Country']).union(set(df['air2_Country'])))

droplocs_per_fy = df.resample('AS-OCT', on='MissionDate')['DropLoc']
pulocs_per_fy = df.resample('AS-OCT', on='MissionDate')['PULOC']
drop_countries_per_fy = df.resample('AS-OCT', on='MissionDate')['air2_Country']
pu_countries_per_fy = df.resample('AS-OCT', on='MissionDate')['air_Country']
unique_droplocs = droplocs_per_fy.nunique()
unique_pulocs = pulocs_per_fy.nunique()
unique_countries = drop_countries_per_fy.nunique()
expansion = pd.DataFrame({'Pickup Airports': unique_pulocs,
                          'Dropoff Airports': unique_droplocs,
                          'Destination Countries': unique_countries})
expansion.index = expansion.index.year + 1
expansion.index.name = 'FY'

usa_pu = set(df.loc[df['air_Country'] == 'USA']['PULOC'])
usa_drop = set(df.loc[df['air2_Country'] == 'USA']['DropLoc'])
foreign_pu = set(df.loc[df['air_Country'] != 'USA']['PULOC'])
foreign_drop = set(df.loc[df['air2_Country'] != 'USA']['DropLoc'])

missions = df.groupby(['MissionDate', 'MissionID', 'MissionNumber', 'PULOC', 'DropLoc'])
mission_segments = len(missions)

```

The ARTS dataset contains <%= len(set(df['AlienMasterID'])) %> records of passengers on <%= len(set(df.MissionID)) %> ICE Air Operations missions during the period from <%= print(earliest_record.strftime('%B %-d, %Y')) %> to <%= print(latest_record.strftime('%B %-d, %Y')) %>, including full data for U.S. Federal Government Fiscal Years 2011 through 2018.

According to the ARTS Data Dictionary and the DHS OIG, each ICE Air "Mission" represents flights by a single aircraft; each mission can have multiple flight legs (represented by combinations of pickup and dropoff locations) which illustrate the movement of ICE Air passengers, but do not reconstruct exact flight itinerarires. The dataset includes <%= mission_segments %> such flight segments; the average mission involves <%= round(mission_segments / len(set(df['MissionID'])), 2) %> legs.<%= fn("Based on reconstruction of selected flight itineraries using publicly available flight tracking applications, it appears that some missions may involve staging flights without passengers; such flights would not be represented in the ARTS dataset.") %>

According to the DHS OIG, the charter aircraft used by ICE Air have a maximum capacity of 135 detainees; some . However, <%= sum(missions['AlienMasterID'].nunique() > 135) %> missions in the dataset include more than 135 passengers, with a maximum of <%= missions['AlienMasterID'].nunique().max() %> recorded passengers. Notably, this is exactly twice the reported capacity of 135 passengers, suggesting that some missions may involve multiple flights; alternatively, these missions may use larger aircraft. The average total number of passengers per mission for the entire dataset is <%= round(df.groupby('MissionID')['AlienMasterID'].nunique().mean(), 2) %>, and the median number of passengers per mission is <%= df.groupby('MissionID')['AlienMasterID'].nunique().median() %>. The average number of passengers per flight leg is <%= round(missions['AlienMasterID'].nunique().mean(), 2) %> while the median number of passengers per flight leg is <%= missions['AlienMasterID'].nunique().median() %>.

ICE Air missions can include a mix of passengers destined for either "removal" from the U.S. to another country or to hubs near the U.S.-Mexico border, where deportation proceeds via ground transportation; or "transfer" between locations within the U.S. (A small number of records denote "transfers" and "removals" originating outside of the U.S., and "transfers" destined to non-U.S. countries; it is possible that these represent errors in data entry.)

```python, removal_transfer_trends, echo=False

removal_percent = round((len(df.loc[df['R-T'] == 'R']) / len(df) * 100), 2)
transfer_percent = round((len(df.loc[df['R-T'] == 'T']) / len(df) * 100), 2)

removal_df = df.loc[df['R-T'] == 'R']
transfer_df = df.loc[df['R-T'] == 'T']
removal_df.set_index('MissionDate', inplace=True)
transfer_df.set_index('MissionDate', inplace=True)
removal_df.name = 'Removals'
transfer_df.name = 'Transfers'

annual_removals = removal_df['AlienMasterID'].resample('AS-OCT').nunique()
annual_removals.name = 'Total removals'
annual_transfers = transfer_df['AlienMasterID'].resample('AS-OCT').nunique()
annual_transfers.name = 'Total transfers'

r_t_annual = pd.DataFrame({'Removals': annual_removals['2010':'2017'], 'Transfers': annual_transfers['2010':'2017']})
r_t_annual.index = [f'FY{str(x)[2:4]}' for x in r_t_annual.index.year + 1]

```

<div align='center'>
<p><strong>Figure 1: ICE Air Annual Passengers: Removals & Transfers</strong></p>

```python, removal_transfer_trend_plot, echo=False

def removal_transfer_bar(data, title=str, xlabel=str, ylabel=str):
    
    fig, ax = plt.subplots()
    
    data.plot(kind='bar', stacked=True, legend=True, ax=ax).legend(bbox_to_anchor=(1,1))
    
    ax.set_axisbelow(True)
    ax.set_ylabel(ylabel, fontsize=16)
    ax.set_xlabel(xlabel, fontsize=16)
    
#    ax.set_title(title, fontsize=18)
    ax.tick_params(labelsize=14)
    plt.xticks(rotation=0)
#    ax.set_facecolor('#EEEEEE')
#    ax.grid(color='#FFFFFF')
    
    fig.set_size_inches(10, 8)

removal_transfer_bar(r_t_annual,
                     title=f'ICE Air Annual Passengers',
                     ylabel=f'Total Passengers',
                     xlabel='Fiscal Year');

```
</div>

<%= removal_percent %>% of passengers in the ARTS database were destined for removal, <%= transfer_percent %>% represent transfers. Due to the limitations of the ARTS database described above, it is difficult to determine how many passengers categorized as transfers may simply be in the staging process for deportation, versus transfer for other reasons such as between detention facilities, appearances in legal processes, or release. (A trivial number of passengers are not categorized as either removals or transfers.)

FY 2012 had the highest passenger volume in the dataset, with <%= r_t_annual.loc['FY12'].sum() %> total passengers. After declining to a minimum of <%= r_t_annual.loc['FY15'].sum() %> total passengers during FY 2015, the number of passengers begins to ascend again, reaching <%= r_t_annual.loc['FY18'].sum() %> total passengers during FY 2018.

The vast majority of ICE Air passengers on removal flights are categorized as citizens of just four countries: Mexico, Guatemala, Honduras, and El Salvador. For most years, citizens of the Dominican Republic are the next largest group, with the exception of FY 2017, when a large group of Haitians were deported; see Figure 2, which displays the total removals for nationalities which break the top 5 for any year represented in the dataset.

<div align='center'>
<p><strong>Figure 2: ICE Air Removals by Country of Citizenship<br>(Top 5 any year)</strong></p>

```python, country_of_citizenship, echo=False

df_to_analyze = removal_df
df_to_analyze.name = removal_df.name

g = df_to_analyze.groupby([pd.Grouper(freq='AS-OCT', sort=True), 'CountryOfCitizenship'])['AlienMasterID'].nunique()
country_of_citizenship_by_year = g.reset_index()
country_of_citizenship_by_year.rename({'MissionDate': 'FY'}, axis='columns', inplace=True)
country_of_citizenship_by_year.set_index('FY', inplace=True)
country_of_citizenship_by_year.sort_values(by='AlienMasterID', ascending=False, inplace=True)
country_of_citizenship_by_year = country_of_citizenship_by_year['2010':'2017']

in_top_5 = list()
for year in country_of_citizenship_by_year.index.unique():
    temp = country_of_citizenship_by_year.loc[f'{year}'][['CountryOfCitizenship', 'AlienMasterID']]
    temp_top_5 = temp[0:5]
    in_top_5.extend(list(temp_top_5['CountryOfCitizenship']))

top_5_df = pd.DataFrame()

for year in country_of_citizenship_by_year.index.unique():
    temp = country_of_citizenship_by_year.loc[f'{year}'][['CountryOfCitizenship', 'AlienMasterID']]
    temp_top_5 = temp[temp['CountryOfCitizenship'].isin(list(set(in_top_5)))]
    if len(temp) > 5:
        all_others = temp[~temp['CountryOfCitizenship'].isin(list(set(in_top_5)))]
        all_other_count = sum(all_others['AlienMasterID'])
    else:
        all_other_count = 0
    other_df = pd.DataFrame([['ALL OTHERS', all_other_count]],
                            columns=['CountryOfCitizenship',
                                     'AlienMasterID'],
                            index=[year])
    temp_top_5 = temp_top_5.append(other_df)
    top_5_df = top_5_df.append(temp_top_5)

top_5_df.sort_index(inplace=True)
top_5_df.index = [f'FY{str(x)[2:4]}' for x in top_5_df.index.year + 1]

top_5_data = pd.pivot_table(data=top_5_df,
                       index=top_5_df.index,
                       columns='CountryOfCitizenship',
                       values='AlienMasterID',
                       aggfunc=np.sum,
                       fill_value=0)

top_5_data = top_5_data.reindex(top_5_data.sum().sort_values(ascending=False).index, axis=1)
cols = list(top_5_data.columns)
cols.remove('ALL OTHERS')
cols.append('ALL OTHERS')
top_5_data = top_5_data[cols]
top_5_data.columns = top_5_data.columns.str.title()
top_5_data.columns.name = 'Country of Citizenship'

def country_of_citizenship_trend(data, title=str, filename=str, xlabel=str, ylabel=str):
    
    fig, ax = plt.subplots()
    
    data.plot(kind='bar', stacked=True, legend=True, ax=ax).legend(bbox_to_anchor=(1,1))

    
#    ax.set_axisbelow(True)
#    ax.set_facecolor('#EEEEEE')
#    ax.grid(color='#FFFFFF')
    ax.set_ylabel(ylabel, fontsize=16)
    ax.set_xlabel(xlabel, fontsize=16)
#   ax.set_title(title, fontsize=18)
    ax.tick_params(labelsize=14)
    plt.xticks(rotation=0)

    fig.set_size_inches(10, 8)
#   return fig, ax

country_of_citizenship_trend(top_5_data,
                             title=f'ICE Air {df_to_analyze.name.title()} by Country of Citizenship \n (Top 5 any year)',
                             filename=f'top5_total_{df_to_analyze.name.lower()}_nationalities_any_year',
                             ylabel=f'Total {df_to_analyze.name.title()}',
                             xlabel='Fiscal Year');

```
</div>

In total, over the period covered by the ARTS dataset, ICE Air operations have been conducted to or from <%= len(usa_pu.union(usa_drop)) %> airports in the U.S. and its territories; and to <% len(foreign_pu.union(foreign_drop)) %> airports in <%= total_countries - 1 %> other countries worldwide.

ICE Air's reach has expanded with time. During Fiscal Year 2018, the last year for which complete data is available, ICE Air operations were carried out in <%= expansion.loc[2018, 'Destination Countries'] %> countries, including the United States; passengers were picked up at <%= expansion.loc[2018, 'Pickup Airports'] %> different airports and dropped off at <%= expansion.loc[2018, 'Dropoff Airports'] %> airports. As seen in the chart below, the reach of ICE Air has grown steadily since falling off during FY 2013; with operations in FY 2018 representing its maximum extent in terms of unique dropoff airports and destination countries (including the U.S.).

<div align='center'>
<p><strong>Table 1: ICE Air's Global Reach</strong></p>
<%= print(tabulate(expansion.loc[2011:2018], headers=expansion.columns, tablefmt="html")) %>
</div>

## Notes

<%= print_fn_refs() %>

