```python, imports_and_global_vars, echo=False
#
# Title: ICE Air
# Author: University of Washington Center for Human Rights
# Date: 2019-03-18
#

import pandas as pd
import numpy as np
import yaml
import matplotlib.pyplot as plt
from tabulate import tabulate

with open('input/dtypes.yaml', 'r') as yamlfile:
    column_types = yaml.load(yamlfile)

read_csv_opts = {'sep': '|',
                 'quotechar': '"',
                 'compression': 'gzip',
                 'encoding': 'utf-8',
                 'dtype': column_types,
                 'parse_dates': ['MissionDate'],
                 'infer_datetime_format': True}

df = pd.read_csv('input/ice-air.csv.gz', **read_csv_opts)
data_dict = pd.read_csv('input/ARTS_Data_Dictionary.csv.gz', sep='|', header=1)

passenger_cols = ['AlienMasterID', 
				  'Status', 
				  'Sex', 
				  'Convictions', 
				  'GangMember', 
				  'ClassLvl', 
				  'Age', 
				  'MissionNumber', 
				  'PULOC', 
				  'DropLoc', 
				  'StrikeFromList', 
				  'ReasonStruck', 
				  'R-T', 
				  'Code', 
				  'CountryOfCitizenship', 
				  'Juvenile', 
				  'MissionWeek', 
				  'MissionQuarter', 
				  'MissionYear', 
				  'MissionMonth', 
				  'Criminality', 
				  'FamilyUnitFlag', 
				  'UnaccompaniedFlag', 
				  'MissionID', 
				  'MissionDate']
airport_cols = ['air_AirportID', 
				'air_AirportName', 
				'air_City', 
				'st_StateID', 
				'st_StateAbbr', 
				'AOR_AORID', 
				'AOR_AOR', 
				'AOR_AORName', 
				'air_Country', 
				'air2_AirportID', 
				'air2_AirportName', 
				'air2_City', 
				'st2_StateID', 
				'st2_StateAbbr', 
				'aor2_AORID', 
				'aor2_AOR', 
				'aor2_AORName', 
				'air2_Country']

pre_drop = len(df)
df = df.drop_duplicates()
post_drop = len(df)
assert pre_drop == post_drop

pre_drop = len(df)
df = df.drop_duplicates()
post_drop = len(df)
assert pre_drop == post_drop

earliest_record = df['MissionDate'].min()
latest_record = df['MissionDate'].max()
number_of_pickup_airports = len(set(df['PULOC'].dropna()))
number_of_dropoff_airports = len(set(df['DropLoc'].dropna()))

unique_AlienMasterID = len(set(df['AlienMasterID']))
assert sum(df['AlienMasterID'].isnull()) == 0
AlienMasterID_count = df.groupby(['AlienMasterID']).size()

unique_MissionIDs = len(set(df['MissionID']))
assert sum(df['MissionID'].isnull()) == 0

unique_MissionNumbers = len(set(df['MissionNumber']))
assert sum(df['MissionNumber'].isnull()) == 0

assert unique_MissionIDs == unique_MissionNumbers

```
# ICE Air Operations

## The ARTS Dataset

This report uses data from ICE's Alien Repatriation Tracking System (ARTS) obtained via a Freedom of Information Act (FOIA) Request by the University of Washington Center for Human Rights. The ARTS dataset contains <%= len(df) %> records relating to ICE Air Operations charter flights during the period from <%= print(earliest_record.strftime('%B %-d, %Y')) %> to <%= print(latest_record.strftime('%B %-d, %Y')) %>, including full data for U.S. Federal Government Fiscal Years 2011 through 2018.<a href="#_ftn1" name="_ftnref1"><sup>[1]</sup></a>

The ARTS dataset is made up of <%= len(passenger_cols) + len(airport_cols) %> fields, defined in a data dictionary provided by ICE; however, as described below, the content of these fields does not always conform to the definitions provided. The first <%= len(passenger_cols)%> fields relate to passenger and mission characteristics; the latter <%= len(airport_cols) %> fields, marked by various prefixes, relate to characteristics of the airports and locations associated with each record. (Additional fields generated by UWCHR in the process of analysis of the dataset are not enumerated here.) There is no indication that the content of any of these fields was withheld or redacted by ICE upon release of the dataset; as noted below, it does appear that the ARTS database includes additional fields that were not released to UWCHR.

The ARTS dataset uses three key fields to identify passengers (`AlienMasterID`) and missions (`MissionID` and `MissionNumber`). The `AlienMasterID` field is made up of <%= unique_AlienMasterID %> unique values. `AlienMasterID` values are consecutive numbers starting at <%= df['AlienMasterID'].min() %> and incrementing to <%= df['AlienMasterID'].max() %>.

Each `AlienMasterID` value is used a maximum of <%= AlienMasterID_count.max() %> times. This means that there is no inherent way to track the movement of individual passengers on multiple flights in the ARTS dataset as released to the UWCHR by ICE; close analysis of specific combinations of passenger characteristics (i.e. age, nationality, criminal conviction status) does suggest that passengers are represented multiple times in the dataset, but systematically identifying individual passengers would be prohibitively difficult.

According to a [2015 audit of ICE Air by the Department of Homeland Security Office of Inspector General (OIG)](https://www.oig.dhs.gov/sites/default/files/assets/Mgmt/2015/OIG_15-57_Apr15.pdf), the ARTS database does include fields for passenger A-Numbers and Fingerprint IDs, which would permit tracking of repeat passengers; though the OIG also notes inconsistencies in the usage of these identifiers. The OIG report confirms that some passengers are subjected to repeated transfers, noting several cases of apparently redundant transfers.

The `MissionID` and `MissionNumber` also present limitations for detailed analysis. The dataset contains <%= unique_MissionIDs %> `MissionID` and <%= unique_MissionNumbers %> `MissionNumber` values, which appear to be completely equivalent: combinations of these values are strictly one-to-one, and they are not hierarchical (see code snippet below). Like `AlienMasterID`, both values consist of consecutive numbers, which suggests that contrary to the ARTS data dictionary, the `MissionNumber` field bears no relation to actual flight numbers.

```python, MissionID_versus_MissionNumber, echo=True

assert sum(df.groupby(['MissionID', 'MissionNumber'])['MissionNumber'].nunique() > 1) == 0
assert sum(df.groupby(['MissionNumber', 'MissionID'])['MissionID'].nunique() > 1) == 0
assert sum(df.groupby(['MissionNumber', 'MissionID'])['MissionDate'].nunique() > 1) == 0
assert sum(df.groupby(['MissionID', 'MissionNumber'])['MissionDate'].nunique() > 1) == 0

```

ICE Air missions as represented by the `MissionID` and `MissionNumber` fields never span more than one day, though multiple missions may occur on a given date. The `MissionDate` field only records the day of the mission; the dataset does not include any other time data, such as takeoff or landing timestamps. Each mission can include multiple combinations of pickup and drop-off locations, represented by the `PULOC` and `DropLoc` fields. These values encode the pickup and drop-off location for each passenger on the mission, not the flight itinerary of the mission. Therefore, while each mission may include multiple flights, it is not possible to use this version of the ARTS database to conclusively calculate the total number of flights operated by ICE Air.

Remaining fields in the dataset represent passenger and airport characteristics. Many of the fields are unstandardized and present significant challenges for cleaning and analysis, especially the `Status`, `GangMember`, and `Convictions` fields, which include many unique and often irrelevant values. (This concern was also noted by the DHS OIG in its 2015 audit.) Several of these fields are worth explaining here:

* The `Status` field, despite being defined in the ARTS Data Dictionary as relating to "Criminal Status", appears to relate to the passenger's grounds for deportability or the status of their immigration case. Some values in this field conform to a set of 29 alphanumeric codes used by ICE categorize the status of removal processes (see Kerwin et al., 2015, for a description of each of these codes *include table in report*), others consist of unstandardized text descriptions, including unrelated or irrelevant values. In total this field contains more than <%= df['Status'].nunique() %> unique values, after cleaning as described below.
* The `Convictions`, `Criminality` and `Code` fields all represent different ways of coding a passenger's criminal status. `Convictions` is an unstructured field with <%= df['Convictions'].nunique() %> unique values, presumably representing each passenger's most serious criminal conviction. The `Criminality` field is more structured and was easily cleaned into a binary category where "NC" represents passengers without a criminal conviction and "C" represents passengers with a criminal conviction. However, it is important to note that this field is not always consistent with the `Convictions` field, and it contains <%= sum(df['Criminality'].isnull()) %> missing values, especially in the earlier period of the dataset. The `Code` field consists of a relatively structured set of alphabetic codes which also appear to relate to criminal status, but their meaning is unclear.
* The `Age` and `Juvenile` fields are relatively self-explanatory. `Juvenile` is a binary field where all passengers aged 17 or younger are marked True; the values in this field are consistent with the numeric values in `Age`. Values below 0 or above 99 in `Age` were set as null values in the cleaning process.
* Notably, two ARTS fields that would likely be of great interest to researchers and advocates, `FamilyUnitFlag` and `UnaccompaniedFlag` (presumably relating to unaccompanied minors), are entirely unused in this dataset: not a single record is flagged with either of these values. As noted above, there is no indication that these values have been redacted or withheld by ICE, suggesting that they are simply not used.

## Cleaning

In fact, upon close inspection of the records with repeated `AlienMasterID` values, it becomes apparent that these records are only repeated because of inconsistencies in certain airport and location values, which results in the duplication of some passenger records.

## Analysis

```python, ice_air_scope, echo=False

assert sum(df['DropLoc'].isnull()) == 0
assert sum(df['PULOC'].isnull()) == 0
number_of_pickup_airports = len(set(df['PULOC'].dropna()))
number_of_dropoff_airports = len(set(df['DropLoc'].dropna()))
total_airports = len(set(df['PULOC'].dropna()).union(set(df['DropLoc'].dropna())))

number_of_pickup_countries = len(set(df['air_Country'].dropna()))
number_of_dropoff_countries = len(set(df['air2_Country'].dropna()))
total_countries = len(set(df['air_Country']).union(set(df['air2_Country'])))

droplocs_per_fy = df.resample('AS-OCT', on='MissionDate')['DropLoc']
pulocs_per_fy = df.resample('AS-OCT', on='MissionDate')['PULOC']
drop_countries_per_fy = df.resample('AS-OCT', on='MissionDate')['air2_Country']
pu_countries_per_fy = df.resample('AS-OCT', on='MissionDate')['air_Country']
unique_droplocs = droplocs_per_fy.nunique()
unique_pulocs = pulocs_per_fy.nunique()
unique_countries = drop_countries_per_fy.nunique()
expansion = pd.DataFrame({'Pickup Airports': unique_pulocs,
                          'Dropoff Airports': unique_droplocs,
                          'Destination Countries': unique_countries})
expansion.index = expansion.index.year + 1
expansion.index.name = 'FY'

usa_pu = set(df.loc[df['air_Country'] == 'USA']['PULOC'])
usa_drop = set(df.loc[df['air2_Country'] == 'USA']['DropLoc'])
foreign_pu = set(df.loc[df['air_Country'] != 'USA']['PULOC'])
foreign_drop = set(df.loc[df['air2_Country'] != 'USA']['DropLoc'])

```

The ARTS dataset contains <%= round((len(set(df['AlienMasterID'])) / 1000000), 2) %> million records of passengers on nearly <%= print(f'{int(round((len(set(df.MissionID)) / 1000), 1))},000') %> ICE Air Operations missions during the period from <%= print(earliest_record.strftime('%B %-d, %Y')) %> to <%= print(latest_record.strftime('%B %-d, %Y')) %>, including full data for U.S. Federal Government Fiscal Years 2011 through 2018.

The ARTS database assigns each passenger a unique ID for each mission. Because this ID is simply a sequential numeric ID, and the dataset does not include other unique identifiers such as passenger name or A-number, it is not inherently possible to determine the number of individuals represented in the dataset; nor is it possible to track individuals who may have experienced multiple flights. Close inspection of the data does permit identification of possible repeat passengers based on combinations of characteristics, such as age, country of citizenship, etc. However, given the number of records contained in the dataset, and notable inconsistencies in data entry, such a de-duplication process at scale would be prohibitive, if feasible.

ICE Air "missions" are identified by a unique ID value. Each mission can include multiple combinations of pickup and drop-off locations. These values encode the pickup and drop-off location for each passenger on the mission, not the flight itinerary of the mission. Therefore, while each mission may include multiple flight segments, the ARTS database does not represent the total number of flights operated by ICE Air during the period covered.

Missions can include a mix of passengers destined for either "removal" from the U.S. to another country or to hubs near the U.S.-Mexico border, where deportation proceeds via ground transportation; or "transfer" between locations within the U.S. (A small number of records denote "transfers" and "removals" originating outside of the U.S., and "transfers" destined to non-U.S. countries; it is possible that these represent errors in data entry.)

```python, removal_transfer_trends, echo=False

removal_percent = round((len(df.loc[df['R-T'] == 'R']) / len(df) * 100), 2)
transfer_percent = round((len(df.loc[df['R-T'] == 'T']) / len(df) * 100), 2)

removal_df = df.loc[df['R-T'] == 'R']
transfer_df = df.loc[df['R-T'] == 'T']
removal_df.set_index('MissionDate', inplace=True)
transfer_df.set_index('MissionDate', inplace=True)

annual_removals = removal_df['AlienMasterID'].resample('AS-OCT').nunique()
annual_removals.name = 'Total removals'
annual_transfers = transfer_df['AlienMasterID'].resample('AS-OCT').nunique()
annual_transfers.name = 'Total transfers'

r_t_annual = pd.DataFrame({'Removals': annual_removals['2010':'2017'], 'Transfers': annual_transfers['2010':'2017']})
r_t_annual.index = [f'FY{str(x)[2:4]}' for x in r_t_annual.index.year + 1]

```

<%= removal_percent %>% of passengers in the ARTS database were destined for removal, <%= transfer_percent %>% represent transfers. Due to the limitations of the ARTS database described above, it is difficult to determine how many passengers categorized as transfers may simply be in the staging process for deportation, versus transfer for other reasons such as between detention facilities, appearances in legal processes, or release. (A trivial number of passengers are not categorized as either removals or transfers.)

FY 2012 had the highest passenger volume in the dataset, with <%= r_t_annual.loc['FY12'].sum() %> total passengers. After declining to a minimum of <%= r_t_annual.loc['FY15'].sum() %> total passengers during FY 2015, the number of passengers begins to ascend again, reaching <%= r_t_annual.loc['FY18'].sum() %> total passengers during FY 2018:

<div align='center'>
<p><strong>Figure 1: ICE Air Annual Passengers</strong></p>
```python, trend_plot, echo=False

def removal_transfer_bar(data, title=str, xlabel=str, ylabel=str):
    
    fig, ax = plt.subplots()
    
    data.plot(kind='bar', stacked=True, legend=True, ax=ax).legend(bbox_to_anchor=(1,1))
    
    ax.set_axisbelow(True)
    ax.set_ylabel(ylabel, fontsize=16)
    ax.set_xlabel(xlabel, fontsize=16)
    
#    ax.set_title(title, fontsize=18)
    ax.tick_params(labelsize=14)
    plt.xticks(rotation=0)
    ax.set_facecolor('#EEEEEE')
    ax.grid(color='#FFFFFF')
    
    fig.set_size_inches(10, 8)

removal_transfer_bar(r_t_annual,
                     title=f'ICE Air Annual Passengers',
                     ylabel=f'Total Passengers',
                     xlabel='Fiscal Year');

```
</div>

Passengers 

As revealed by the ARTS data, ICE Air is global in scale. In total, over the period covered by the ARTS dataset, ICE Air operations have been conducted to or from <%= len(usa_pu.union(usa_drop)) %> airports in the U.S. and its territories; and to <% len(foreign_pu.union(foreign_drop)) %> airports in <%= total_countries - 1 %> other countries worldwide.

ICE Air's reach has expanded with time. During Fiscal Year 2018, the last year for which complete data is available, ICE Air operations were carried out in <%= expansion.loc[2018, 'Destination Countries'] %> countries, including the United States; passengers were picked up at <%= expansion.loc[2018, 'Pickup Airports'] %> different airports and dropped off at <%= expansion.loc[2018, 'Dropoff Airports'] %> airports. As seen in the chart below, the reach of ICE Air has grown steadily since falling off during FY 2013; with operations in FY 2018 representing its maximum extent in terms of unique dropoff airports and destination countries (including the U.S.).

<div align='center'>
<p><strong>Table 1: ICE Air's Global Reach</strong></p>
<%= print(tabulate(expansion.loc[2011:2018], headers=expansion.columns, tablefmt="html")) %>
</div>

## Notes

<a href="#_ftnref1" name="_ftn1"><sup>[1]</sup></a> Test note
